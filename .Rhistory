knitr::opts_chunk$set(echo = TRUE)
sc<-read_csv("~/STAT757/skillcraft/SkillCraft1_Dataset.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dbplyr) #piping
library(ggplot2) #plotting
library(Hmisc) # for correlation matrix
library(corrplot) # For corrlation matrix graphic
library(ggthemes) #for ggplot Themes
library(caret) #for easy machine learning workflow
library(leaps) #for computing stepwise regression
sc<-read_csv("~/STAT757/skillcraft/SkillCraft1_Dataset.csv")
install.packages("SC2API")
knitr::opts_chunk$set(echo = TRUE)
sc%>%
mututate(NumberOfPACs=NumberOfPACs*88.5)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dbplyr) #piping
library(ggplot2) #plotting
library(Hmisc) # for correlation matrix
library(corrplot) # For corrlation matrix graphic
library(ggthemes) #for ggplot Themes
library(caret) #for easy machine learning workflow
library(leaps) #for computing stepwise regression
library(SC2API) #starcraft 2 API
set_token("33be678eb46d4f51ac36f72218abcdd2", "Sb3QWR8A9mN9s0XgAt5w4j0FttY84pkg")
# Assignment Midterm 2
#https://cgrudz.github.io/teaching/stat_757_2020_fall/assets/midterm_2.html
sc<-read_csv("~/STAT757/skillcraft/SkillCraft1_Dataset.csv")
colnames(sc)
sc%>%
mututate(NumberOfPACs=NumberOfPACs*88.5)
sc%>%
mutate(NumberOfPACs=NumberOfPACs*88.5)
sc%>%
mutate(NumberOfPACs=NumberOfPACs*88.5,MinimapAttacks=MinimapAttacks*88.5,MinimapRightClicks=MinimapRightClicks*88.5)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dbplyr) #piping
library(ggplot2) #plotting
library(Hmisc) # for correlation matrix
library(corrplot) # For corrlation matrix graphic
library(ggthemes) #for ggplot Themes
library(caret) #for easy machine learning workflow
library(leaps) #for computing stepwise regression
library(SC2API) #starcraft 2 API
set_token("33be678eb46d4f51ac36f72218abcdd2", "Sb3QWR8A9mN9s0XgAt5w4j0FttY84pkg")
# Assignment Midterm 2
#https://cgrudz.github.io/teaching/stat_757_2020_fall/assets/midterm_2.html
sc<-read_csv("~/STAT757/skillcraft/SkillCraft1_Dataset.csv")
colnames(sc)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dbplyr) #piping
library(ggplot2) #plotting
library(Hmisc) # for correlation matrix
library(corrplot) # For corrlation matrix graphic
library(ggthemes) #for ggplot Themes
library(caret) #for easy machine learning workflow
library(leaps) #for computing stepwise regression
library(SC2API) #starcraft 2 API
set_token("33be678eb46d4f51ac36f72218abcdd2", "Sb3QWR8A9mN9s0XgAt5w4j0FttY84pkg")
# Assignment Midterm 2
#https://cgrudz.github.io/teaching/stat_757_2020_fall/assets/midterm_2.html
sc<-read_csv("~/STAT757/skillcraft/SkillCraft1_Dataset.csv")
colnames(sc)
sc%>%
mutate(NumberOfPACs=NumberOfPACs*88.5,
MinimapAttacks=MinimapAttacks*88.5,
MinimapRightClicks=MinimapRightClicks*88.5,
SelectByHotkeys=SelectByHotkeys*88.5,
AssignToHotkeys=AssignToHotkeys*88.5,
UniqueHotkeys=UniqueHotkeys*88.5,
WorkersMade=WorkersMade*88.5,
UniqueUnitsMade=UniqueUnitsMade*88.5,
ComplexUnitsMade=ComplexUnitsMade*88.5,
ComplexAbilitiesUsed=ComplexAbilitiesUsed*88.5)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dbplyr) #piping
library(ggplot2) #plotting
library(Hmisc) # for correlation matrix
library(corrplot) # For corrlation matrix graphic
library(ggthemes) #for ggplot Themes
library(caret) #for easy machine learning workflow
library(leaps) #for computing stepwise regression
library(SC2API) #starcraft 2 API
set_token("33be678eb46d4f51ac36f72218abcdd2", "Sb3QWR8A9mN9s0XgAt5w4j0FttY84pkg")
# Assignment Midterm 2
#https://cgrudz.github.io/teaching/stat_757_2020_fall/assets/midterm_2.html
sc<-read_csv("~/STAT757/skillcraft/SkillCraft1_Dataset.csv")
colnames(sc)
sc%>%
mutate(NumberOfPACs=NumberOfPACs*88.5,
MinimapAttacks=MinimapAttacks*88.5,
MinimapRightClicks=MinimapRightClicks*88.5,
SelectByHotkeys=SelectByHotkeys*88.5,
AssignToHotkeys=AssignToHotkeys*88.5,
UniqueHotkeys=UniqueHotkeys*88.5,
WorkersMade=WorkersMade*88.5,
UniqueUnitsMade=UniqueUnitsMade*88.5,
ComplexUnitsMade=ComplexUnitsMade*88.5,
ComplexAbilitiesUsed=ComplexAbilitiesUsed*88.5)
#set type
sc$HoursPerWeek<-as.numeric(sc$HoursPerWeek)
sc$TotalHours<-as.numeric(sc$TotalHours)
count_missing_age<-count(sc%>%
filter(is.na(Age))%>%arrange(LeagueIndex))
count_professional<-count(sc%>%filter(LeagueIndex==8))
count_grandmaster<-count(sc%>%filter(LeagueIndex==8))
print(paste('There are ',count_missing_age,' missing values in the age column. There are ',count_professional,' professional #players.'))
sc_describe<-describe(sc)
print('Age Values')
sc_describe[["Age"]][["counts"]][2]
print('LeagueIndex Values')
sc_describe[["LeagueIndex"]][["counts"]][2]
print('Hours Per Week Lower Extreme Values')
sc_describe[["HoursPerWeek"]][["extremes"]][0]
sc<-sc%>%
drop_na()%>%
filter(HoursPerWeek!=0)
sc_describe<-describe(sc)
summary(sc)
sc_cor<-cor(select_if(sc,is.numeric),use = "complete.obs")
sc_cor_plot<-corrplot(sc_cor,
tl.cex=.75,
tl.col='black')
LeagueIndex_Normal<-shapiro.test(sc$LeagueIndex)
ggplot(sc, aes(LeagueIndex)) +
geom_histogram(bins=7)+
ggtitle(
'LeagueIndex Distribution',subtitle = paste(LeagueIndex_Normal[3],
" P-Value: ",LeagueIndex_Normal[2]))+
xlab("League Index (Bronze(1) to Grand Master(7)")+
ylab("Count")
ggplot(sc, aes(LeagueIndex)) +
geom_density()+
ggtitle(
'LeagueIndex Distribution',subtitle = paste(LeagueIndex_Normal[3],
" P-Value: ",LeagueIndex_Normal[2]))+
xlab("League Index (Bronze(1) to Grand Master(7)")+
ylab("Count")
#+theme_wsj(base_size = 7.5,color = "white")
qqnorm(scale(sc$LeagueIndex))
HoursPerWeek_Normal<-shapiro.test(sc$LeagueIndex)
ggplot(sc, aes(scale(log(HoursPerWeek)))) +
geom_density()+
ggtitle(
'Hour per week distribution',subtitle = paste(HoursPerWeek_Normal[3],
" P-Value: ",HoursPerWeek_Normal[2]))+
xlab("Hours Per Week")+
ylab("Count")
qqnorm(scale(sc$HoursPerWeek))
qqnorm(scale(sc$APM))
sc_lm_sw_back <- regsubsets(LeagueIndex~., sc, nvmax = 5,
method = "exhaust",force.in = NULL,force.out = NULL)
sc_lm_sw_back_summary<-summary(sc_lm_sw_back)
#using the lm provivded
sc_lm_r1<-lm(LeagueIndex~ActionLatency+AssignToHotkeys+APM+MinimapAttacks,sc)
summary(sc_lm_r1,cor=T)
#Normality
qqnorm(residuals(sc_lm_r1))
shapiro.test(residuals(sc_lm_r1))
sc_lm<-lm(LeagueIndex~.-GameID,sc)
(sc_lm_1<-update(sc_lm,.~.-ComplexAbilitiesUsed))
sc_lm_2<-update(sc_lm,.~.-ComplexAbilitiesUsed-MinimapRightClicks)
sc_lm_3<-update(sc_lm,.~.-ComplexAbilitiesUsed-MinimapRightClicks-TotalHours)
sc_lm_4<-update(sc_lm,.~.-ComplexAbilitiesUsed-MinimapRightClicks-TotalHours-APM)
sc_lm_5<-update(sc_lm,.~.-ComplexAbilitiesUsed-MinimapRightClicks-TotalHours-APM-UniqueUnitsMade)
sc_lm_6<-update(sc_lm,.~.-ComplexAbilitiesUsed-MinimapRightClicks-TotalHours-APM-UniqueUnitsMade-ComplexUnitsMade)
sc_lm_7<-update(sc_lm,.~.-ComplexAbilitiesUsed-MinimapRightClicks-TotalHours-APM-UniqueUnitsMade-ComplexUnitsMade-ActionsInPAC)
sc_lm_8<-update(sc_lm,.~.-ComplexAbilitiesUsed-MinimapRightClicks-TotalHours-APM-UniqueUnitsMade-ComplexUnitsMade-ActionsInPAC-TotalMapExplored)
sc_lm_9<-update(sc_lm,.~.-ComplexAbilitiesUsed-MinimapRightClicks-TotalHours-APM-UniqueUnitsMade-ComplexUnitsMade-ActionsInPAC-TotalMapExplored-Age)
#anova(sc_lm,sc_lm_1,sc_lm_2,sc_lm_3,sc_lm_4,sc_lm_5,sc_lm_6,sc_lm_7,sc_lm_8,sc_lm_9)
sc_lm<-lm(LeagueIndex~.-GameID,sc)
sc_lm_1<-update(sc_lm,.~.-ComplexAbilitiesUsed)
sc_lm_2<-update(sc_lm,.~.-ComplexAbilitiesUsed-MinimapRightClicks)
sc_lm_3<-update(sc_lm,.~.-ComplexAbilitiesUsed-MinimapRightClicks-TotalHours)
summary(sc_lm_3)
sc_lm_4<-update(sc_lm,.~.-ComplexAbilitiesUsed-MinimapRightClicks-TotalHours-APM)
sc_lm_5<-update(sc_lm,.~.-ComplexAbilitiesUsed-MinimapRightClicks-TotalHours-APM-UniqueUnitsMade)
sc_lm_6<-update(sc_lm,.~.-ComplexAbilitiesUsed-MinimapRightClicks-TotalHours-APM-UniqueUnitsMade-ComplexUnitsMade)
sc_lm_7<-update(sc_lm,.~.-ComplexAbilitiesUsed-MinimapRightClicks-TotalHours-APM-UniqueUnitsMade-ComplexUnitsMade-ActionsInPAC)
sc_lm_8<-update(sc_lm,.~.-ComplexAbilitiesUsed-MinimapRightClicks-TotalHours-APM-UniqueUnitsMade-ComplexUnitsMade-ActionsInPAC-TotalMapExplored)
sc_lm_9<-update(sc_lm,.~.-ComplexAbilitiesUsed-MinimapRightClicks-TotalHours-APM-UniqueUnitsMade-ComplexUnitsMade-ActionsInPAC-TotalMapExplored-Age)
#anova(sc_lm,sc_lm_1,sc_lm_2,sc_lm_3,sc_lm_4,sc_lm_5,sc_lm_6,sc_lm_7,sc_lm_8,sc_lm_9)
View(sc_lm_1)
sc_lm_summary<-summary(sc_lm)
View(sc_lm_summary)
sc_lm_summary[["adj.r.squared"]]
sc_lm_summary<-summary(sc_lm)
summary(sc_lm)[["adj.r.squared"]]
sc_lm_sw_back <- regsubsets(LeagueIndex~., sc, nvmax = 5,
method = "exhaust",force.in = NULL,force.out = NULL)
sc_lm_sw_back_summary<-summary(sc_lm_sw_back)
#using the lm provivded
sc_lm_r1<-lm(LeagueIndex~ActionLatency+AssignToHotkeys+APM+MinimapAttacks,sc)
summary(sc_lm_r1,cor=T)
#Normality
qqnorm(residuals(sc_lm_r1))
shapiro.test(residuals(sc_lm_r1))
sc_lm_sw_back<-regsubsets(LeagueIndex~., sc, nvmax = 5,
method = "exhaust",force.in = NULL,force.out = NULL)
sc_lm_sw_back_summary<-summary(sc_lm_sw_back)
#using the lm provivded
sc_lm_r1<-lm(LeagueIndex~ActionLatency+AssignToHotkeys+APM+MinimapAttacks,sc)
summary(sc_lm_r1,cor=T)
#Normality
qqnorm(residuals(sc_lm_r1))
shapiro.test(residuals(sc_lm_r1))
install.packages("GGally")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dbplyr) #piping
library(ggplot2) #plotting
library(Hmisc) # for correlation matrix
library(corrplot) # For correlation matrix graphic
#library(ggthemes) #for ggplot Themes
#library(SC2API) #starcraft 2 API
#library(broom) #grabbing p-value
#library(GGally)  ggpairs
#set_token("33be678eb46d4f51ac36f72218abcdd2", #"Sb3QWR8A9mN9s0XgAt5w4j0FttY84pkg")
# Assignment Midterm 2
#https://cgrudz.github.io/teaching/stat_757_2020_fall/assets/midterm_2.html
sc<-read_csv("~/STAT757/skillcraft/SkillCraft1_Dataset.csv")
colnames(sc)
#set type
sc$HoursPerWeek<-as.numeric(sc$HoursPerWeek)
sc$TotalHours<-as.numeric(sc$TotalHours)
count_missing_age<-count(sc%>%
filter(is.na(Age))%>%arrange(LeagueIndex))
count_professional<-count(sc%>%filter(LeagueIndex==8))
count_grandmaster<-count(sc%>%filter(LeagueIndex==8))
print(paste('There are ',count_missing_age,' missing values in the age column. There are ',count_professional,' professional #players.'))
sc_describe<-describe(sc)
print('Age Values')
sc_describe[["Age"]][["counts"]][2]
print('LeagueIndex Values')
sc_describe[["LeagueIndex"]][["counts"]][2]
print('Hours Per Week Lower Extreme Values')
sc_describe[["HoursPerWeek"]][["extremes"]][0]
describe(sc$TotalHours)
sc<-filter(sc,sc$TotalHours<1000000)
sc<-sc%>%
drop_na()%>%
filter(HoursPerWeek!=0)
sc_describe<-describe(sc)
sc<-sc%>%
mutate(NumberOfPACs=NumberOfPACs*88.5,
MinimapAttacks=MinimapAttacks*88.5,
MinimapRightClicks=MinimapRightClicks*88.5,
SelectByHotkeys=SelectByHotkeys*88.5,
AssignToHotkeys=AssignToHotkeys*88.5,
UniqueHotkeys=UniqueHotkeys*88.5,
WorkersMade=WorkersMade*88.5,
UniqueUnitsMade=UniqueUnitsMade*88.5,
ComplexUnitsMade=ComplexUnitsMade*88.5,
ComplexAbilitiesUsed=ComplexAbilitiesUsed*88.5,
GapBetweenPACs=GapBetweenPACs*1000,
ActionLatency=ActionLatency*1000)
colnames(sc)
#sc$LeagueIndex <- as.factor(sc$LeagueIndex)
#ggplot(sc, aes(x=LeagueIndex, y=ActionsInPAC)) +
#  geom_boxplot()
#lm(LeagueIndex~APM,sc)
summary(sc)
sc_cor<-cor(select_if(sc,is.numeric),use = "complete.obs")
sc_cor_plot<-corrplot(sc_cor,
tl.cex=.75,
tl.col='black')
LeagueIndex_Normal<-shapiro.test(sc$LeagueIndex)
ggplot(sc, aes(LeagueIndex)) +
geom_histogram(bins=7)+
ggtitle(
'LeagueIndex Distribution',subtitle = paste(LeagueIndex_Normal[3],
" P-Value: ",LeagueIndex_Normal[2]))+
xlab("League Index (Bronze(1) to Grand Master(7)")+
ylab("Count")
ggplot(sc, aes(LeagueIndex)) +
geom_density()+
ggtitle(
'LeagueIndex Distribution',subtitle = paste(LeagueIndex_Normal[3],
" P-Value: ",LeagueIndex_Normal[2]))+
xlab("League Index (Bronze(1) to Grand Master(7)")+
ylab("Count")
#+theme_wsj(base_size = 7.5,color = "white")
qqnorm(scale(sc$LeagueIndex))
HoursPerWeek_Normal<-shapiro.test(sc$HoursPerWeek)
ggplot(sc, aes(scale(log(HoursPerWeek)))) +
geom_density()+
ggtitle(
'Hour per week distribution',subtitle = paste(HoursPerWeek_Normal[3],
" P-Value: ",HoursPerWeek_Normal[2]))+
xlab("Hours Per Week")+
ylab("Count")
qqnorm(scale(sc$HoursPerWeek))
qqnorm(scale(sc$APM))
## Stepwise Linear Regression:
#The function summary() reports the best set of variables for each model size. From the output above, an asterisk #specifies that a given variable is included in the corresponding model @Stepwise.
#library(caret) #for easy machine learning workflow
#library(leaps) #for computing stepwise regression
#sc_lm_sw_back<-regsubsets(LeagueIndex~., sc, nvmax = 5,
#                     method = "exhaust",force.in = NULL,force.out = NULL)
#sc_lm_sw_back_summary<-summary(sc_lm_sw_back)
#using the lm provivded
#sc_lm_r1<-lm(LeagueIndex~ActionLatency+AssignToHotkeys+APM+MinimapAttacks,sc)
#summary(sc_lm_r1,cor=T)
#Normality
#qqnorm(residuals(sc_lm_r1))
#shapiro.test(residuals(sc_lm_r1))
sc_lm<-lm(LeagueIndex~.-GameID,sc)
sc_lm_1<-update(sc_lm,.~.-ComplexAbilitiesUsed)
sc_lm_2<-update(sc_lm,.~.-ComplexAbilitiesUsed-MinimapRightClicks)
sc_lm_3<-update(sc_lm,.~.-ComplexAbilitiesUsed-MinimapRightClicks-APM)
sc_lm_4<-update(sc_lm,.~.-ComplexAbilitiesUsed-MinimapRightClicks-APM-UniqueUnitsMade)
#anova(sc_lm_1)$'Pr(>F)'
summary(sc_lm)
summary(sc_lm_4)
plot(sc_lm)
plot(sc_lm_4)
confint(sc_lm_4)
anova(sc_lm,sc_lm_1,sc_lm_2,sc_lm_3,sc_lm_4)
anova(sc_lm,sc_lm_4)
summary(sc_lm_4,cor='T')
plot(sc_lm_4)
lm_APM<-lm(APM~LeagueIndex*(.-LeagueIndex-GameID),sc)
summary(lm_APM)
qqnorm(residuals(lm_APM))
qqline(residuals(lm_APM))
shapiro.test(residuals(lm_APM))
data <-get_league_data(season_id = 43,
queue_id = 201,
team_type = 0,
league_id = 3,
host_region = "eu")
