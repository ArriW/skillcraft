require(reshape2)
m <- polr(factor(LeagueIndex) ~ ActionLatency+TotalHours+AssignToHotkeys+APM+MinimapAttacks, data = sc_n, Hess=TRUE)
BIC(m)
pval_bic<-cbind(c(BIC(sc_lm),BIC(sc_lm_1),BIC(sc_lm_2),BIC(sc_lm_3),
BIC(sc_lm_4),BIC(sc_lm_final)),"PValue")%>%data.frame()
pval_bic$ModelSequence <- 1:nrow(pval_bic)
sw_bic<-cbind(sc_sw_summary[['bic']],"SW")%>%data.frame()
sw_bic$ModelSequence<- 1:nrow(sw_bic)
lm_bic<-rbind(sw_bic,pval_bic)
lm_bic$X1<-as.numeric(as.character(lm_bic$X1))
lm_bic$X1<-lm_bic$X1-min(lm_bic$X1)
ggplot(lm_bic,aes(ModelSequence,y=X1,color=X2))+geom_point()
require(foreign)
require(ggplot2)
require(MASS)
require(Hmisc)
require(reshape2)
m <- polr(factor(LeagueIndex) ~ ActionLatency, data = sc_n, Hess=TRUE)
BIC(m)
require(foreign)
require(ggplot2)
require(MASS)
require(Hmisc)
require(reshape2)
m <- polr(factor(LeagueIndex) ~ ActionLatency+TotalHours+AssignToHotkeys+APM+MinimapAttacks, data = sc_n, Hess=TRUE)
BIC(m)
plot(BIC(sc_sw_summary[['bic']]))
plot(sc_sw_summary[['bic']])
kable(sc_sw_summary[["outmat"]][1:5,c("ActionLatency","TotalHours",
"AssignToHotkeys","APM","MinimapAttacks")])
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dbplyr) #piping
library(ggplot2) #plotting
library(gridExtra)# easy plot grids
library(Hmisc) # for correlation matrix
library(corrplot) # For correlation matrix graphic
#library(SC2API) #starcraft 2 API
library(broom) #tidy lm summaries
library(knitr) #pretty tables
library(reshape2) #melt function
#set_token("33be678eb46d4f51ac36f72218abcdd2", #"Sb3QWR8A9mN9s0XgAt5w4j0FttY84pkg")
# Assignment Midterm 2
# https://cgrudz.github.io/teaching/stat_757_2020_fall/assets/midterm_2.html
# Final
# https://cgrudz.github.io/teaching/stat_757_2020_fall/assets/final_project.html
sc<-read_csv("~/STAT757/skillcraft/SkillCraft1_Dataset.csv")
colnames(sc)
cbPalette <- c("#CC6600", "#999999", "#FFCC00", "#CCCFFF", "#CCFFFF","#0072B2", "#FF6600")
#set type
sc$HoursPerWeek<-as.numeric(sc$HoursPerWeek)
sc$TotalHours<-as.numeric(sc$TotalHours)
count_missing_age<-count(sc%>%
filter(is.na(Age))%>%arrange(LeagueIndex))
count_professional<-count(sc%>%filter(LeagueIndex==8))
count_grandmaster<-count(sc%>%filter(LeagueIndex==8))
print(paste('There are ',count_missing_age,' missing values in the age column. There are ',count_professional,' professional #players.'))
sc<-filter(sc,sc$TotalHours<1000000)
sc<-sc%>%
drop_na()%>%
filter(HoursPerWeek!=0)
sc_describe<-describe(sc)
sc<-sc%>%
mutate(NumberOfPACs=NumberOfPACs*88.5,
MinimapAttacks=MinimapAttacks*88.5,
MinimapRightClicks=MinimapRightClicks*88.5,
SelectByHotkeys=SelectByHotkeys*88.5,
AssignToHotkeys=AssignToHotkeys*88.5,
UniqueHotkeys=UniqueHotkeys*88.5,
WorkersMade=WorkersMade*88.5,
UniqueUnitsMade=UniqueUnitsMade*88.5,
ComplexUnitsMade=ComplexUnitsMade*88.5,
ComplexAbilitiesUsed=ComplexAbilitiesUsed*88.5,
GapBetweenPACs=GapBetweenPACs*1000,
ActionLatency=ActionLatency*1000)
LeagueIndex_Normal<-shapiro.test(sc$LeagueIndex)
ggplot(sc)+
geom_histogram(aes(x=LeagueIndex,y=(..count..)/sum(..count..),fill=LeagueIndex),
position = "identity", binwidth = 1,fill=cbPalette) +
ylab("Relative Frequency")+
ggtitle('LeagueIndex Distribution',subtitle = paste(LeagueIndex_Normal[3],
" P-Value: ",LeagueIndex_Normal[2]))+xlab("LeagueIndex 1-Bronze to 7-Grandmaster")+theme_classic()
sc_cor<-cor(select_if(sc,is.numeric),use = "complete.obs")
sc_cor_plot<-corrplot(sc_cor,
tl.cex=.75,
tl.col='black',
type="lower",)
sc_n<-sc
sc<-sc%>%select(!c(GameID,ActionLatency,GapBetweenPACs,NumberOfPACs,SelectByHotkeys,ActionsInPAC))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dbplyr) #piping
library(ggplot2) #plotting
library(gridExtra)# easy plot grids
library(Hmisc) # for correlation matrix
library(corrplot) # For correlation matrix graphic
#library(SC2API) #starcraft 2 API
library(broom) #tidy lm summaries
library(knitr) #pretty tables
library(reshape2) #melt function
#set_token("33be678eb46d4f51ac36f72218abcdd2", #"Sb3QWR8A9mN9s0XgAt5w4j0FttY84pkg")
# Assignment Midterm 2
# https://cgrudz.github.io/teaching/stat_757_2020_fall/assets/midterm_2.html
# Final
# https://cgrudz.github.io/teaching/stat_757_2020_fall/assets/final_project.html
sc<-read_csv("~/STAT757/skillcraft/SkillCraft1_Dataset.csv")
colnames(sc)
cbPalette <- c("#CC6600", "#999999", "#FFCC00", "#CCCFFF", "#CCFFFF","#0072B2", "#FF6600")
#set type
sc$HoursPerWeek<-as.numeric(sc$HoursPerWeek)
sc$TotalHours<-as.numeric(sc$TotalHours)
count_missing_age<-count(sc%>%
filter(is.na(Age))%>%arrange(LeagueIndex))
count_professional<-count(sc%>%filter(LeagueIndex==8))
count_grandmaster<-count(sc%>%filter(LeagueIndex==8))
print(paste('There are ',count_missing_age,' missing values in the age column. There are ',count_professional,' professional #players.'))
sc<-filter(sc,sc$TotalHours<1000000)
sc<-sc%>%
drop_na()%>%
filter(HoursPerWeek!=0)
sc_describe<-describe(sc)
sc<-sc%>%
mutate(NumberOfPACs=NumberOfPACs*88.5,
MinimapAttacks=MinimapAttacks*88.5,
MinimapRightClicks=MinimapRightClicks*88.5,
SelectByHotkeys=SelectByHotkeys*88.5,
AssignToHotkeys=AssignToHotkeys*88.5,
UniqueHotkeys=UniqueHotkeys*88.5,
WorkersMade=WorkersMade*88.5,
UniqueUnitsMade=UniqueUnitsMade*88.5,
ComplexUnitsMade=ComplexUnitsMade*88.5,
ComplexAbilitiesUsed=ComplexAbilitiesUsed*88.5,
GapBetweenPACs=GapBetweenPACs*1000,
ActionLatency=ActionLatency*1000)
LeagueIndex_Normal<-shapiro.test(sc$LeagueIndex)
ggplot(sc)+
geom_histogram(aes(x=LeagueIndex,y=(..count..)/sum(..count..),fill=LeagueIndex),
position = "identity", binwidth = 1,fill=cbPalette) +
ylab("Relative Frequency")+
ggtitle('LeagueIndex Distribution',subtitle = paste(LeagueIndex_Normal[3],
" P-Value: ",LeagueIndex_Normal[2]))+xlab("LeagueIndex 1-Bronze to 7-Grandmaster")+theme_classic()
sc_cor<-cor(select_if(sc,is.numeric),use = "complete.obs")
sc_cor_plot<-corrplot(sc_cor,
tl.cex=.75,
tl.col='black',
type="lower",)
sc_n<-sc
sc<-sc%>%select(!c(GameID,ActionLatency,GapBetweenPACs,NumberOfPACs,SelectByHotkeys,ActionsInPAC))
count(sc%>%filter(TotalHours==0))
?logit
??logit
plot(sc_sw_summary[['bic']])
kable(sc_sw_summary[["outmat"]][1:5,c("ActionLatency","TotalHours",
"AssignToHotkeys","APM","MinimapAttacks")])
plot(sc_sw_summary[['bic']],ylab="BIC",xlab="Index (1='One Predictor Model'")
kable(sc_sw_summary[["outmat"]][1:5,c("ActionLatency","TotalHours",
"AssignToHotkeys","APM","MinimapAttacks")])
plot(sc_sw_summary[['bic']],ylab="BIC",xlab="Index (1=One Predictor Model")
kable(sc_sw_summary[["outmat"]][1:5,c("ActionLatency","TotalHours",
"AssignToHotkeys","APM","MinimapAttacks")])
plot(sc_sw_summary[['bic']],ylab="BIC",xlab="Index (1=One Predictor Model)")
kable(sc_sw_summary[["outmat"]][1:5,c("ActionLatency","TotalHours",
"AssignToHotkeys","APM","MinimapAttacks")])
plot(sc_sw_summary[['bic']]-min(sc_sw_summary[['bic']]),ylab="BIC",xlab="Index (1=One Predictor Model)")
kable(sc_sw_summary[["outmat"]][1:5,c("ActionLatency","TotalHours",
"AssignToHotkeys","APM","MinimapAttacks")])
plot(sc_sw_summary[['bic']]-min(sc_sw_summary[['bic']]),ylab="BIC",xlab="Index (1=One Predictor Model)",color="red")
kable(sc_sw_summary[["outmat"]][1:5,c("ActionLatency","TotalHours",
"AssignToHotkeys","APM","MinimapAttacks")])
plot(sc_sw_summary[['bic']]-min(sc_sw_summary[['bic']]),ylab="BIC",xlab="Index (1=One Predictor Model)",fill="red")
kable(sc_sw_summary[["outmat"]][1:5,c("ActionLatency","TotalHours",
"AssignToHotkeys","APM","MinimapAttacks")])
plot(sc_sw_summary[['bic']]-min(sc_sw_summary[['bic']]),ylab="BIC",xlab="Index (1=One Predictor Model)",title="Stepwise Modeling BIC")
kable(sc_sw_summary[["outmat"]][1:5,c("ActionLatency","TotalHours",
"AssignToHotkeys","APM","MinimapAttacks")])
plot(sc_sw_summary[['bic']]-min(sc_sw_summary[['bic']]),ylab="BIC",xlab="Index (1,One Predictor Model)",title="Stepwise Modeling BIC")
kable(sc_sw_summary[["outmat"]][1:5,c("ActionLatency","TotalHours",
"AssignToHotkeys","APM","MinimapAttacks")])
plot(sc_sw_summary[['bic']]-min(sc_sw_summary[['bic']]),ylab="BIC",xlab="Index (1,One Predictor Model)",main ="Stepwise Modeling BIC")
kable(sc_sw_summary[["outmat"]][1:5,c("ActionLatency","TotalHours",
"AssignToHotkeys","APM","MinimapAttacks")])
plot(sc_sw_summary[['bic']]-min(sc_sw_summary[['bic']]),ylab="BIC",xlab="Index (1,One Predictor Model)",main ="Stepwise Modeling BIC")
kable(sc_sw_summary[["outmat"]][1:5,c("ActionLatency","TotalHours",
"AssignToHotkeys","APM","MinimapAttacks")])
plot(sc_sw_summary[['bic']]-min(sc_sw_summary[['bic']]),ylab="BIC",xlab="Index (1,One Predictor Model)",main ="Stepwise Modeling BIC")
sc_sw_summary[["outmat"]][1:5,c("ActionLatency","TotalHours",
"AssignToHotkeys","APM","MinimapAttacks")]
vif(sc_sw_lm)
library(car)
vif(sc_sw_lm)
library(car)
vif(sc_sw_lm)
cor(sc_n$APM,sc_n$ActionLatency)
library(car)
vif(sc_sw_lm)
cor(sc_n$APM,sc_n$ActionLatency)
summary(update(sc_sw_lm,.~.-APM))
summary(update(sc_sw_lm,.~.-ActionLatency))
library(car)
vif(sc_sw_lm)
cor(sc_n$APM,sc_n$ActionLatency)
summary(sc_sw_lm)
summary(update(sc_sw_lm,.~.-APM))
summary(update(sc_sw_lm,.~.-ActionLatency))
library(car)
vif(sc_sw_lm)
cor(sc_n$APM,sc_n$ActionLatency)
summary(sc_sw_lm)
summary(update(sc_sw_lm,.~.-APM))
summary(update(sc_sw_lm,.~.-ActionLatency))
library(car)
vif(sc_sw_lm)
cor(sc_n$APM,sc_n$ActionLatency)
summary(sc_sw_lm)
summary(update(sc_sw_lm,.~.-APM))
summary(update(sc_sw_lm,.~.-ActionLatency))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dbplyr) #piping
library(ggplot2) #plotting
library(gridExtra)# easy plot grids
library(Hmisc) # for correlation matrix
library(corrplot) # For correlation matrix graphic
#library(SC2API) #starcraft 2 API
library(broom) #tidy lm summaries
library(knitr) #pretty tables
library(reshape2) #melt function
#set_token("33be678eb46d4f51ac36f72218abcdd2", #"Sb3QWR8A9mN9s0XgAt5w4j0FttY84pkg")
# Assignment Midterm 2
# https://cgrudz.github.io/teaching/stat_757_2020_fall/assets/midterm_2.html
# Final
# https://cgrudz.github.io/teaching/stat_757_2020_fall/assets/final_project.html
sc<-read_csv("~/STAT757/skillcraft/SkillCraft1_Dataset.csv")
colnames(sc)
cbPalette <- c("#CC6600", "#999999", "#FFCC00", "#CCCFFF", "#CCFFFF","#0072B2", "#FF6600")
#set type
sc$HoursPerWeek<-as.numeric(sc$HoursPerWeek)
sc$TotalHours<-as.numeric(sc$TotalHours)
count_missing_age<-count(sc%>%
filter(is.na(Age))%>%arrange(LeagueIndex))
count_professional<-count(sc%>%filter(LeagueIndex==8))
count_grandmaster<-count(sc%>%filter(LeagueIndex==8))
print(paste('There are ',count_missing_age,' missing values in the age column. There are ',count_professional,' professional #players.'))
sc<-filter(sc,sc$TotalHours<1000000)
sc<-sc%>%
drop_na()%>%
filter(HoursPerWeek!=0)
sc_describe<-describe(sc)
sc<-sc%>%
mutate(NumberOfPACs=NumberOfPACs*88.5,
MinimapAttacks=MinimapAttacks*88.5,
MinimapRightClicks=MinimapRightClicks*88.5,
SelectByHotkeys=SelectByHotkeys*88.5,
AssignToHotkeys=AssignToHotkeys*88.5,
UniqueHotkeys=UniqueHotkeys*88.5,
WorkersMade=WorkersMade*88.5,
UniqueUnitsMade=UniqueUnitsMade*88.5,
ComplexUnitsMade=ComplexUnitsMade*88.5,
ComplexAbilitiesUsed=ComplexAbilitiesUsed*88.5,
GapBetweenPACs=GapBetweenPACs*1000,
ActionLatency=ActionLatency*1000)
LeagueIndex_Normal<-shapiro.test(sc$LeagueIndex)
ggplot(sc)+
geom_histogram(aes(x=LeagueIndex,y=(..count..)/sum(..count..),fill=LeagueIndex),
position = "identity", binwidth = 1,fill=cbPalette) +
ylab("Relative Frequency")+
ggtitle('LeagueIndex Distribution',subtitle = paste(LeagueIndex_Normal[3],
" P-Value: ",LeagueIndex_Normal[2]))+xlab("LeagueIndex 1-Bronze to 7-Grandmaster")+theme_classic()
sc_cor<-cor(select_if(sc,is.numeric),use = "complete.obs")
sc_cor_plot<-corrplot(sc_cor,
tl.cex=.75,
tl.col='black',
type="lower",)
sc_n<-sc
sc<-sc%>%select(!c(GameID,ActionLatency,GapBetweenPACs,NumberOfPACs,SelectByHotkeys,ActionsInPAC))
library(car)
vif(sc_sw_lm)
cor(sc_n$APM,sc_n$ActionLatency)
summary(sc_sw_lm)
summary(update(sc_sw_lm,.~.-APM))
summary(update(sc_sw_lm,.~.-ActionLatency))
sc_n<-sc_n%>%mutate(TotalHours=log(TotalHours))
library(caret) #for easy machine learning workflow
library(leaps) #for computing stepwise regression
sc_sw<-regsubsets(LeagueIndex~.-GameID,sc_n , nvmax = 25,
method = "exhaust")
sc_sw_summary<-summary(sc_sw)
plot(sc_sw_summary[['bic']]-min(sc_sw_summary[['bic']]),ylab="BIC",xlab="Index (1,One Predictor Model)",main ="Stepwise Modeling BIC")
sc_sw_summary[["outmat"]][1:5,c("ActionLatency","APM",
"AssignToHotkeys","MinimapAttacks","TotalHours")]
plot(sc_sw_summary[['bic']]-min(sc_sw_summary[['bic']]),ylab="BIC",xlab="Index (1,One Predictor Model)",main ="Stepwise Modeling BIC")
sc_sw_summary[["outmat"]][1:5,c("ActionLatency","TotalHours",
"AssignToHotkeys","APM","MinimapAttacks")]
library(car)
vif(sc_sw_lm)
cor(sc_n$APM,sc_n$ActionLatency)
summary(sc_sw_lm)
summary(update(sc_sw_lm,.~.-APM))
summary(update(sc_sw_lm,.~.-ActionLatency))
library(car)
sc_sw_lm<-lm(LeagueIndex~ActionLatency+TotalHours+AssignToHotkeys+APM+MinimapAttacks,sc_n)
vif(sc_sw_lm)
cor(sc_n$APM,sc_n$ActionLatency)
summary(sc_sw_lm)
summary(update(sc_sw_lm,.~.-APM))
summary(update(sc_sw_lm,.~.-ActionLatency))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dbplyr) #piping
library(ggplot2) #plotting
library(gridExtra)# easy plot grids
library(Hmisc) # for correlation matrix
library(corrplot) # For correlation matrix graphic
#library(SC2API) #starcraft 2 API
library(broom) #tidy lm summaries
library(knitr) #pretty tables
library(reshape2) #melt function
#set_token("33be678eb46d4f51ac36f72218abcdd2", #"Sb3QWR8A9mN9s0XgAt5w4j0FttY84pkg")
# Assignment Midterm 2
# https://cgrudz.github.io/teaching/stat_757_2020_fall/assets/midterm_2.html
# Final
# https://cgrudz.github.io/teaching/stat_757_2020_fall/assets/final_project.html
sc<-read_csv("~/STAT757/skillcraft/SkillCraft1_Dataset.csv")
colnames(sc)
cbPalette <- c("#CC6600", "#999999", "#FFCC00", "#CCCFFF", "#CCFFFF","#0072B2", "#FF6600")
#set type
sc$HoursPerWeek<-as.numeric(sc$HoursPerWeek)
sc$TotalHours<-as.numeric(sc$TotalHours)
count_missing_age<-count(sc%>%
filter(is.na(Age))%>%arrange(LeagueIndex))
count_professional<-count(sc%>%filter(LeagueIndex==8))
count_grandmaster<-count(sc%>%filter(LeagueIndex==8))
print(paste('There are ',count_missing_age,' missing values in the age column. There are ',count_professional,' professional #players.'))
sc<-filter(sc,sc$TotalHours<1000000)
sc<-sc%>%
drop_na()%>%
filter(HoursPerWeek!=0)
sc_describe<-describe(sc)
sc<-sc%>%
mutate(NumberOfPACs=NumberOfPACs*88.5,
MinimapAttacks=MinimapAttacks*88.5,
MinimapRightClicks=MinimapRightClicks*88.5,
SelectByHotkeys=SelectByHotkeys*88.5,
AssignToHotkeys=AssignToHotkeys*88.5,
UniqueHotkeys=UniqueHotkeys*88.5,
WorkersMade=WorkersMade*88.5,
UniqueUnitsMade=UniqueUnitsMade*88.5,
ComplexUnitsMade=ComplexUnitsMade*88.5,
ComplexAbilitiesUsed=ComplexAbilitiesUsed*88.5,
GapBetweenPACs=GapBetweenPACs*1000,
ActionLatency=ActionLatency*1000)
LeagueIndex_Normal<-shapiro.test(sc$LeagueIndex)
ggplot(sc)+
geom_histogram(aes(x=LeagueIndex,y=(..count..)/sum(..count..),fill=LeagueIndex),
position = "identity", binwidth = 1,fill=cbPalette) +
ylab("Relative Frequency")+
ggtitle('LeagueIndex Distribution',subtitle = paste(LeagueIndex_Normal[3],
" P-Value: ",LeagueIndex_Normal[2]))+xlab("LeagueIndex 1-Bronze to 7-Grandmaster")+theme_classic()
sc_cor<-cor(select_if(sc,is.numeric),use = "complete.obs")
sc_cor_plot<-corrplot(sc_cor,
tl.cex=.75,
tl.col='black',
type="lower",)
sc_n<-sc
sc<-sc%>%select(!c(GameID,ActionLatency,GapBetweenPACs,NumberOfPACs,SelectByHotkeys,ActionsInPAC))
sc_n<-sc_n%>%mutate(TotalHours=log(TotalHours))
library(caret) #for easy machine learning workflow
library(leaps) #for computing stepwise regression
sc_sw<-regsubsets(LeagueIndex~.-GameID,sc_n , nvmax = 25,
method = "exhaust")
sc_sw_summary<-summary(sc_sw)
plot(sc_sw_summary[['bic']]-min(sc_sw_summary[['bic']]),ylab="BIC",xlab="Index (1,One Predictor Model)",main ="Stepwise Modeling BIC")
sc_sw_summary[["outmat"]][1:5,c("ActionLatency","TotalHours",
"AssignToHotkeys","APM","MinimapAttacks")]
library(car)
sc_sw_lm<-lm(LeagueIndex~ActionLatency+TotalHours+AssignToHotkeys+APM+MinimapAttacks,sc_n)
vif(sc_sw_lm)
cor(sc_n$APM,sc_n$ActionLatency)
summary(sc_sw_lm)
summary(update(sc_sw_lm,.~.-APM))
summary(update(sc_sw_lm,.~.-ActionLatency))
library(car)
sc_sw_lm<-lm(LeagueIndex~ActionLatency+TotalHours+AssignToHotkeys+APM+MinimapAttacks,sc_n)
vif(sc_sw_lm)
cor(sc_n$APM,sc_n$ActionLatency)
summary(sc_sw_lm)
summary(update(sc_sw_lm,.~.-APM))
BIC(update(sc_sw_lm,.~.-APM))
summary(update(sc_sw_lm,.~.-ActionLatency))
BIC(update(sc_sw_lm,.~.-ActionLatency))
sc[["ActionLatency"]]
sc[["ActionLatency","APM"]]
sc[[c("ActionLatency","APM")]]
sc_n[["ActionLatency","APM"]]
sc_n["ActionLatency","APM"]
sc_n[,c("ActionLatency","APM")]
sc_n[,c("ActionLatency","APM","TotalHours,"MinimapAttacks")]
sc_n[,c("ActionLatency","APM","TotalHours","MinimapAttacks")]
sc_n[,c("ActionLatency","APM","TotalHours","MinimapAttacks","AssigntoHotkeys")]
sc_n[,c("ActionLatency","APM","TotalHours","MinimapAttacks","AssignToHotkeys")]
sc_cor<-cor(sc_n[,c("ActionLatency","APM","TotalHours","MinimapAttacks","AssignToHotkeys")],use = "complete.obs")
sc_cor_plot<-corrplot(sc_cor,
tl.cex=.75,
tl.col='black',
type="lower",)
?corrplot()
sc_cor<-cor(sc_n[,c("ActionLatency","APM","TotalHours","MinimapAttacks","AssignToHotkeys")],use = "complete.obs")
sc_cor_plot<-corrplot(sc_cor,
tl.cex=.75,
tl.col='black',
type="lower",diag=FALSE)
sc_cor<-cor(sc_n[,c("ActionLatency","APM","TotalHours","MinimapAttacks","AssignToHotkeys")],use = "complete.obs")
sc_cor_plot<-corrplot(sc_cor,
tl.cex=.75,
tl.col='black',
type="lower",diag=FALSE, method="number")
plot(sc_sw_lm)
plot(sc_lm_final)
plot(sc_sw_lm)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dbplyr) #piping
library(ggplot2) #plotting
library(gridExtra)# easy plot grids
library(Hmisc) # for correlation matrix
library(corrplot) # For correlation matrix graphic
#library(SC2API) #starcraft 2 API
library(broom) #tidy lm summaries
library(knitr) #pretty tables
library(reshape2) #melt function
#set_token("33be678eb46d4f51ac36f72218abcdd2", #"Sb3QWR8A9mN9s0XgAt5w4j0FttY84pkg")
# Assignment Midterm 2
# https://cgrudz.github.io/teaching/stat_757_2020_fall/assets/midterm_2.html
# Final
# https://cgrudz.github.io/teaching/stat_757_2020_fall/assets/final_project.html
sc<-read_csv("~/STAT757/skillcraft/SkillCraft1_Dataset.csv")
colnames(sc)
cbPalette <- c("#CC6600", "#999999", "#FFCC00", "#CCCFFF", "#CCFFFF","#0072B2", "#FF6600")
#set type
sc$HoursPerWeek<-as.numeric(sc$HoursPerWeek)
sc$TotalHours<-as.numeric(sc$TotalHours)
count_missing_age<-count(sc%>%
filter(is.na(Age))%>%arrange(LeagueIndex))
count_professional<-count(sc%>%filter(LeagueIndex==8))
count_grandmaster<-count(sc%>%filter(LeagueIndex==8))
print(paste('There are ',count_missing_age,' missing values in the age column. There are ',count_professional,' professional #players.'))
sc<-filter(sc,sc$TotalHours<1000000)
sc<-sc%>%
drop_na()%>%
filter(HoursPerWeek!=0)
sc_describe<-describe(sc)
sc<-sc%>%
mutate(NumberOfPACs=NumberOfPACs*88.5,
MinimapAttacks=MinimapAttacks*88.5,
MinimapRightClicks=MinimapRightClicks*88.5,
SelectByHotkeys=SelectByHotkeys*88.5,
AssignToHotkeys=AssignToHotkeys*88.5,
UniqueHotkeys=UniqueHotkeys*88.5,
WorkersMade=WorkersMade*88.5,
UniqueUnitsMade=UniqueUnitsMade*88.5,
ComplexUnitsMade=ComplexUnitsMade*88.5,
ComplexAbilitiesUsed=ComplexAbilitiesUsed*88.5,
GapBetweenPACs=GapBetweenPACs*1000,
ActionLatency=ActionLatency*1000)
LeagueIndex_Normal<-shapiro.test(sc$LeagueIndex)
ggplot(sc)+
geom_histogram(aes(x=LeagueIndex,y=(..count..)/sum(..count..),fill=LeagueIndex),
position = "identity", binwidth = 1,fill=cbPalette) +
ylab("Relative Frequency")+
ggtitle('LeagueIndex Distribution',subtitle = paste(LeagueIndex_Normal[3],
" P-Value: ",LeagueIndex_Normal[2]))+xlab("LeagueIndex 1-Bronze to 7-Grandmaster")+theme_classic()
sc_cor<-cor(select_if(sc,is.numeric),use = "complete.obs")
sc_cor_plot<-corrplot(sc_cor,
tl.cex=.75,
tl.col='black',
type="lower",)
sc_n<-sc
sc<-sc%>%select(!c(GameID,ActionLatency,GapBetweenPACs,NumberOfPACs,SelectByHotkeys,ActionsInPAC))
plot(sc_lm_final)
plot(sc_sw_lm)
plot(sc_lm_final)
plot(sc_sw_lm)
min(fitted.values(sc_lm_final))
shapiro.test(residuals(sc_sw_lm))
shapiro.test(residuals(sc_lm_final))
shapiro.test(residuals(sc_sw_lm))
shapiro.test(residuals(sc_lm_final))
residualPlot(residuals(sc_lm_final))
shapiro.test(residuals(sc_lm_final))
residualPlot(sc_lm_final)
shapiro.test(residuals(sc_sw_lm))
shapiro.test(residuals(sc_lm_final))
plot(residuals(sc_lm_final))
shapiro.test(residuals(sc_sw_lm))
shapiro.test(residuals(sc_lm_final))
plot(fitted.values(sc_lm_final))
shapiro.test(residuals(sc_sw_lm))
shapiro.test(residuals(sc_lm_final))
hist(fitted.values(sc_lm_final))
shapiro.test(residuals(sc_sw_lm))
shapiro.test(residuals(sc_lm_final))
hist(fitted.values(sc_lm_final))
shapiro.test(residuals(sc_sw_lm))
hist(fitted.values(sc_sw_final))
hist(fitted.values(sc_sw_lm))
shapiro.test(residuals(sc_lm_final))
hist(fitted.values(sc_lm_final))
shapiro.test(residuals(sc_sw_lm))
hist(fitted.values(sc_sw_lm))
plot(sc_lm_final)[1]
plot(sc_sw_lm)[1]
residualPlots(sc_lm_final)[1]
